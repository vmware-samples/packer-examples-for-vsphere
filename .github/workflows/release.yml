name: Release

on:
  push:
    tags:
      - "v[0-9]+\\.[0-9]+"


permissions:
  contents: write

jobs:
  github-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4.1.0
        with:
          fetch-depth: 0
      - name: Check Changelog
        shell: pwsh
        run: |
          $version = $env:GITHUB_REF.Replace('refs/tags/', '')
          $changelog = Get-Content -Path CHANGELOG.md
          $foundVersion = $false

          foreach ($line in $changelog) {
            if ($line -match "^## $version$") {
              $foundVersion = $true
              continue
            }
            if ($foundVersion -and $line -match "^## ") {
              break
            }
          }

          if ($foundVersion) {
            Write-Output "SUCCESS: Locating release in the changelog for version '$version'."
          } else {
            Write-Error "FAILED: Locating release in the changelog for version '$version'."
          exit 1
          }
      - name: Create Release Branch
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = $env:GITHUB_REF.Replace('refs/tags/', '')
          $releaseBranch = "release/$version"
          $git = Get-Command git | Select-Object -ExpandProperty Definition
          & $git config --global user.name "github-actions[bot]"
          & $git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          & $git checkout -b $releaseBranch
          & $git push origin $releaseBranch
          if ($LASTEXITCODE -ne 0) {
            Write-Error "FAILED: Creating release branch '$releaseBranch'."
          } else {
            Write-Output "SUCCESS: Creating release branch '$releaseBranch'."
          }
      - name: Rebase Main Branch
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = $env:GITHUB_REF.Replace('refs/tags/', '')
          $releaseBranch = "release/$version"
          $git = Get-Command git | Select-Object -ExpandProperty Definition
          & $git config --global user.name "github-actions[bot]"
          & $git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          & $git checkout $releaseBranch
          & $git pull origin $releaseBranch
          & $git checkout main
          & $git pull origin main
          & $git rebase $releaseBranch
          & $git push origin main
          if ($LASTEXITCODE -ne 0) {
            Write-Error "FAILED: Rebasing main branch from release branch '$releaseBranch'."
          } else {
            Write-Output "SUCCESS: Rebasing main branch from release branch '$releaseBranch'."
          }
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      - name: Create Release in GitHub
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $version = $env:GITHUB_REF.Replace('refs/tags/', '')
          $changelog = Get-Content -Path CHANGELOG.md
          $releaseNotes = $null
          $foundVersion = $false

          foreach ($line in $changelog) {
            if ($line -match "^## $version$") {
              $foundVersion = $true
              continue
            }
            if ($foundVersion -and $line -match "^## ") {
              break
            }
            if ($foundVersion) {
              $releaseNotes += $line + "`n"
            }
          }

          $gh = Get-Command gh | Select-Object -ExpandProperty Definition
          & $gh release create $version --title "$version" --notes "$releaseNotes" --target "release/$version"
          if ($LASTEXITCODE -ne 0) {
            Write-Error "FAILED: Creating GitHub release '$version'."
          } else {
            Write-Output "SUCCESS: Creating GitHub release '$version'."
          }
